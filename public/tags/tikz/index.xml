<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tikz on Not A Rocket Scientist</title><link>http://localhost:1313/tags/tikz/</link><description>Recent content in Tikz on Not A Rocket Scientist</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Fri, 20 Dec 2024 09:07:53 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/tikz/index.xml" rel="self" type="application/rss+xml"/><item><title>A Brief But Comprehensive Book About TikZ and PGFPLOTS</title><link>http://localhost:1313/posts/2024-12-20-a--brief-but-comprehensive-book-about-tikz-and-pgfplots/</link><pubDate>Fri, 20 Dec 2024 09:07:53 +0800</pubDate><guid>http://localhost:1313/posts/2024-12-20-a--brief-but-comprehensive-book-about-tikz-and-pgfplots/</guid><description>&lt;p>Earlier this year, I started a new GitHub repository called &lt;a href="https://github.com/dbrg77/TikZ_and_PGFPLOTS_draw">TikZ_and_PGFPLOTS_draw&lt;/a> where I used &lt;a href="https://tikz.dev/">TikZ&lt;/a> and &lt;a href="https://pgfplots.sourceforge.net">PGFPLOTS&lt;/a> to draw vector graphics for scientific illustrations. Now I&amp;rsquo;m gradually learning and switching to &lt;a href="https://ipe.otfried.org/">Ipe&lt;/a> and &lt;a href="https://inkscape.org">Inkscape&lt;/a> for a more flexible and easier drawing experience. However, TikZ and PGFPLOTS are the two things that I use routinely, so I still want to practice my skills. Therefore, I have kept updating the repo whenever I want to draw some basic stuff.&lt;/p></description></item><item><title>Drawing Vector Graphics For Publication Figures</title><link>http://localhost:1313/posts/2024-02-14-drawing-vector-graphics-for-publication-figures/</link><pubDate>Wed, 14 Feb 2024 16:01:00 +0800</pubDate><guid>http://localhost:1313/posts/2024-02-14-drawing-vector-graphics-for-publication-figures/</guid><description>&lt;p>To generate figures for publications, I often use &lt;a href="https://matplotlib.org">&lt;strong>matplotlib&lt;/strong>&lt;/a> and &lt;a href="https://seaborn.pydata.org">&lt;strong>seaborn&lt;/strong>&lt;/a> to prepare plots and save them in PDF format. Then I use &lt;strong>PowerPoint&lt;/strong> to arrange and organise them into a full figure. Like this one shown below:&lt;/p>
&lt;p>&lt;img src="http://localhost:1313/images/2024-02-14/figure_examples.png" alt="">&lt;/p>
&lt;p>Those panels (a - d) were individually generated using &lt;strong>matplotlib&lt;/strong> (except the genome browser track), saved as PDFs and imported into one slide in &lt;strong>PowerPoint&lt;/strong>. The size of the slide can be set to conform to the requirements of the journal, but &lt;strong>A4 size&lt;/strong> generally works in almost all cases. Labels can be added manually in the &lt;strong>PowerPoint&lt;/strong> using a desired font. Once I&amp;rsquo;m satisfied, the whole slide can be exported to a PDF, which serves as a figure. We can do this for every figure. In this way, it is easy and straightforward to generate publication-ready figures and they are still in vector format and all the elements can be edited by other programs like &lt;a href="https://inkscape.org">&lt;strong>Inkscape&lt;/strong>&lt;/a> or &lt;strong>Illustrator&lt;/strong>.&lt;/p></description></item></channel></rss>